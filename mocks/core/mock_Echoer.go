// Code generated by mockery v2.33.1. DO NOT EDIT.

package core

import mock "github.com/stretchr/testify/mock"

// MockEchoer is an autogenerated mock type for the Echoer type
type MockEchoer struct {
	mock.Mock
}

type MockEchoer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEchoer) EXPECT() *MockEchoer_Expecter {
	return &MockEchoer_Expecter{mock: &_m.Mock}
}

// Echo provides a mock function with given fields: _a0
func (_m *MockEchoer) Echo(_a0 string) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockEchoer_Echo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Echo'
type MockEchoer_Echo_Call struct {
	*mock.Call
}

// Echo is a helper method to define mock.On call
//   - _a0 string
func (_e *MockEchoer_Expecter) Echo(_a0 interface{}) *MockEchoer_Echo_Call {
	return &MockEchoer_Echo_Call{Call: _e.mock.On("Echo", _a0)}
}

func (_c *MockEchoer_Echo_Call) Run(run func(_a0 string)) *MockEchoer_Echo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockEchoer_Echo_Call) Return(_a0 string) *MockEchoer_Echo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEchoer_Echo_Call) RunAndReturn(run func(string) string) *MockEchoer_Echo_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEchoer creates a new instance of MockEchoer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEchoer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEchoer {
	mock := &MockEchoer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
